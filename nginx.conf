events {
    worker_connections 1024;
}

http {
    upstream scraper_backend {
        # Primary instance - handles coordination and admin tasks
        server scraper-primary:3000 weight=3;
        
        # Secondary instances - handle scraping workload
        server scraper-secondary-1:3001 weight=5;
        server scraper-secondary-2:3002 weight=5;
        server scraper-secondary-3:3003 weight=5;
        server scraper-secondary-4:3004 weight=5;
    }
    
    upstream primary_only {
        # Only primary instance for coordination endpoints
        server scraper-primary:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=coordination:10m rate=5r/s;

    server {
        listen 80;
        server_name localhost;

        # Enable gzip compression
        gzip on;
        gzip_types text/plain application/json application/javascript text/css;

        # Health check endpoint
        location /health {
            proxy_pass http://scraper_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Coordination endpoints - route only to primary
        location /api/coordination {
            limit_req zone=coordination burst=10 nodelay;
            proxy_pass http://primary_only;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 60s;
        }

        # Admin endpoints - route only to primary
        location /api/admin {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://primary_only;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Cookie refresh endpoints - route only to primary
        location /api/cookies {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://primary_only;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Inventory upload endpoints - route only to primary
        location /api/inventory {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://primary_only;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 100M;
        }

        # General API endpoints - can be load balanced
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://scraper_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 30s;
        }

        # Static files and root
        location / {
            proxy_pass http://primary_only;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            return 200 '{"error":"Service temporarily unavailable","status":"error"}';
            add_header Content-Type application/json;
        }
    }

    # Monitoring server for internal use
    server {
        listen 8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        # Upstream status
        location /upstream_status {
            return 200 '{"primary":"scraper-primary:3000","secondaries":["scraper-secondary-1:3001","scraper-secondary-2:3002","scraper-secondary-3:3003","scraper-secondary-4:3004"]}';
            add_header Content-Type application/json;
        }
    }
}